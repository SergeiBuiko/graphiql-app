"use strict";(self.webpackChunkreact_scratch_sample=self.webpackChunkreact_scratch_sample||[]).push([[536],{7536:(e,t,r)=>{r.d(t,{cI:()=>oe});var s=r(7294),a=e=>"checkbox"===e.type,i=e=>e instanceof Date,n=e=>null==e;const o=e=>"object"==typeof e;var u=e=>!n(e)&&!Array.isArray(e)&&o(e)&&!i(e),l="undefined"!=typeof window&&void 0!==window.HTMLElement&&"undefined"!=typeof document;function c(e){let t;const r=Array.isArray(e);if(e instanceof Date)t=new Date(e);else if(e instanceof Set)t=new Set(e);else{if(l&&(e instanceof Blob||e instanceof FileList)||!r&&!u(e))return e;if(t=r?[]:{},Array.isArray(e)||(e=>{const t=e.constructor&&e.constructor.prototype;return u(t)&&t.hasOwnProperty("isPrototypeOf")})(e))for(const r in e)t[r]=c(e[r]);else t=e}return t}var d=e=>Array.isArray(e)?e.filter(Boolean):[],f=e=>void 0===e,y=(e,t,r)=>{if(!t||!u(e))return r;const s=d(t.split(/[,[\].]+?/)).reduce(((e,t)=>n(e)?e:e[t]),e);return f(s)||s===e?f(e[t])?r:e[t]:s};const m="onChange",h="onSubmit",v="all",g="pattern",p="required";s.createContext(null);var b=e=>u(e)&&!Object.keys(e).length,_=e=>Array.isArray(e)?e:[e];var V=e=>"string"==typeof e,A=e=>/^\w*$/.test(e),w=e=>d(e.replace(/["|']|\]/g,"").split(/\.|\[/));function F(e,t,r){let s=-1;const a=A(t)?[t]:w(t),i=a.length,n=i-1;for(;++s<i;){const t=a[s];let i=r;if(s!==n){const r=e[t];i=u(r)||Array.isArray(r)?r:isNaN(+a[s+1])?{}:[]}e[t]=i,e=e[t]}return e}var x=(e,t,r,s,a)=>t?{...r[e],types:{...r[e]&&r[e].types?r[e].types:{},[s]:a||!0}}:{};const S=(e,t,r)=>{for(const s of r||Object.keys(e)){const r=y(e,s);if(r){const{_f:e,...s}=r;if(e&&t(e.name)){if(e.ref.focus){e.ref.focus();break}if(e.refs&&e.refs[0].focus){e.refs[0].focus();break}}else u(s)&&S(s,t)}}};var k=e=>({isOnSubmit:!e||e===h,isOnBlur:"onBlur"===e,isOnChange:e===m,isOnAll:e===v,isOnTouch:"onTouched"===e}),D=(e,t,r)=>!r&&(t.watchAll||t.watch.has(e)||[...t.watch].some((t=>e.startsWith(t)&&/^\.\w+/.test(e.slice(t.length))))),O=(e,t,r)=>{const s=d(y(e,r));return F(s,"root",t[r]),F(e,r,s),e},C=e=>"boolean"==typeof e,E=e=>"file"===e.type,T=e=>"function"==typeof e,L=e=>{if(!l)return!1;const t=e?e.ownerDocument:0;return e instanceof(t&&t.defaultView?t.defaultView.HTMLElement:HTMLElement)},j=e=>V(e),N=e=>"radio"===e.type,U=e=>e instanceof RegExp;const B={value:!1,isValid:!1},M={value:!0,isValid:!0};var q=e=>{if(Array.isArray(e)){if(e.length>1){const t=e.filter((e=>e&&e.checked&&!e.disabled)).map((e=>e.value));return{value:t,isValid:!!t.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!f(e[0].attributes.value)?f(e[0].value)||""===e[0].value?M:{value:e[0].value,isValid:!0}:M:B}return B};const I={isValid:!1,value:null};var P=e=>Array.isArray(e)?e.reduce(((e,t)=>t&&t.checked&&!t.disabled?{isValid:!0,value:t.value}:e),I):I;function $(e,t,r="validate"){if(j(e)||Array.isArray(e)&&e.every(j)||C(e)&&!e)return{type:r,message:j(e)?e:"",ref:t}}var H=e=>u(e)&&!U(e)?e:{value:e,message:""},R=async(e,t,r,s,i)=>{const{ref:o,refs:l,required:c,maxLength:d,minLength:m,min:h,max:v,pattern:_,validate:A,name:w,valueAsNumber:F,mount:S,disabled:k}=e._f,D=y(t,w);if(!S||k)return{};const O=l?l[0]:o,B=e=>{s&&O.reportValidity&&(O.setCustomValidity(C(e)?"":e||""),O.reportValidity())},M={},I=N(o),R=a(o),W=I||R,z=(F||E(o))&&f(o.value)&&f(D)||L(o)&&""===o.value||""===D||Array.isArray(D)&&!D.length,G=x.bind(null,w,r,M),J=(e,t,r,s="maxLength",a="minLength")=>{const i=e?t:r;M[w]={type:e?s:a,message:i,ref:o,...G(e?s:a,i)}};if(i?!Array.isArray(D)||!D.length:c&&(!W&&(z||n(D))||C(D)&&!D||R&&!q(l).isValid||I&&!P(l).isValid)){const{value:e,message:t}=j(c)?{value:!!c,message:c}:H(c);if(e&&(M[w]={type:p,message:t,ref:O,...G(p,t)},!r))return B(t),M}if(!(z||n(h)&&n(v))){let e,t;const s=H(v),a=H(h);if(n(D)||isNaN(D)){const r=o.valueAsDate||new Date(D),i=e=>new Date((new Date).toDateString()+" "+e),n="time"==o.type,u="week"==o.type;V(s.value)&&D&&(e=n?i(D)>i(s.value):u?D>s.value:r>new Date(s.value)),V(a.value)&&D&&(t=n?i(D)<i(a.value):u?D<a.value:r<new Date(a.value))}else{const r=o.valueAsNumber||(D?+D:D);n(s.value)||(e=r>s.value),n(a.value)||(t=r<a.value)}if((e||t)&&(J(!!e,s.message,a.message,"max","min"),!r))return B(M[w].message),M}if((d||m)&&!z&&(V(D)||i&&Array.isArray(D))){const e=H(d),t=H(m),s=!n(e.value)&&D.length>+e.value,a=!n(t.value)&&D.length<+t.value;if((s||a)&&(J(s,e.message,t.message),!r))return B(M[w].message),M}if(_&&!z&&V(D)){const{value:e,message:t}=H(_);if(U(e)&&!D.match(e)&&(M[w]={type:g,message:t,ref:o,...G(g,t)},!r))return B(t),M}if(A)if(T(A)){const e=$(await A(D,t),O);if(e&&(M[w]={...e,...G("validate",e.message)},!r))return B(e.message),M}else if(u(A)){let e={};for(const s in A){if(!b(e)&&!r)break;const a=$(await A[s](D,t),O,s);a&&(e={...a,...G(s,a.message)},B(a.message),r&&(M[w]=e))}if(!b(e)&&(M[w]={ref:O,...e},!r))return M}return B(!0),M};function W(e,t){const r=Array.isArray(t)?t:A(t)?[t]:w(t),s=1===r.length?e:function(e,t){const r=t.slice(0,-1).length;let s=0;for(;s<r;)e=f(e)?s++:e[t[s++]];return e}(e,r),a=r.length-1,i=r[a];return s&&delete s[i],0!==a&&(u(s)&&b(s)||Array.isArray(s)&&function(e){for(const t in e)if(!f(e[t]))return!1;return!0}(s))&&W(e,r.slice(0,-1)),e}function z(){let e=[];return{get observers(){return e},next:t=>{for(const r of e)r.next&&r.next(t)},subscribe:t=>(e.push(t),{unsubscribe:()=>{e=e.filter((e=>e!==t))}}),unsubscribe:()=>{e=[]}}}var G=e=>n(e)||!o(e);function J(e,t){if(G(e)||G(t))return e===t;if(i(e)&&i(t))return e.getTime()===t.getTime();const r=Object.keys(e),s=Object.keys(t);if(r.length!==s.length)return!1;for(const a of r){const r=e[a];if(!s.includes(a))return!1;if("ref"!==a){const e=t[a];if(i(r)&&i(e)||u(r)&&u(e)||Array.isArray(r)&&Array.isArray(e)?!J(r,e):r!==e)return!1}}return!0}var K=e=>"select-multiple"===e.type,Q=e=>L(e)&&e.isConnected,X=e=>{for(const t in e)if(T(e[t]))return!0;return!1};function Y(e,t={}){const r=Array.isArray(e);if(u(e)||r)for(const r in e)Array.isArray(e[r])||u(e[r])&&!X(e[r])?(t[r]=Array.isArray(e[r])?[]:{},Y(e[r],t[r])):n(e[r])||(t[r]=!0);return t}function Z(e,t,r){const s=Array.isArray(e);if(u(e)||s)for(const s in e)Array.isArray(e[s])||u(e[s])&&!X(e[s])?f(t)||G(r[s])?r[s]=Array.isArray(e[s])?Y(e[s],[]):{...Y(e[s])}:Z(e[s],n(t)?{}:t[s],r[s]):r[s]=!J(e[s],t[s]);return r}var ee=(e,t)=>Z(e,t,Y(t)),te=(e,{valueAsNumber:t,valueAsDate:r,setValueAs:s})=>f(e)?e:t?""===e?NaN:e?+e:e:r&&V(e)?new Date(e):s?s(e):e;function re(e){const t=e.ref;if(!(e.refs?e.refs.every((e=>e.disabled)):t.disabled))return E(t)?t.files:N(t)?P(e.refs).value:K(t)?[...t.selectedOptions].map((({value:e})=>e)):a(t)?q(e.refs).value:te(f(t.value)?e.ref.value:t.value,e)}var se=e=>f(e)?e:U(e)?e.source:u(e)?U(e.value)?e.value.source:e.value:e;function ae(e,t,r){const s=y(e,r);if(s||A(r))return{error:s,name:r};const a=r.split(".");for(;a.length;){const s=a.join("."),i=y(t,s),n=y(e,s);if(i&&!Array.isArray(i)&&r!==s)return{name:r};if(n&&n.type)return{name:s,error:n};a.pop()}return{name:r}}const ie={mode:h,reValidateMode:m,shouldFocusError:!0};function ne(e={},t){let r,s={...ie,...e},o={submitCount:0,isDirty:!1,isLoading:T(s.defaultValues),isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,touchedFields:{},dirtyFields:{},errors:{}},m={},h=(u(s.defaultValues)||u(s.values))&&c(s.defaultValues||s.values)||{},g=s.shouldUnregister?{}:c(h),p={action:!1,mount:!1,watch:!1},A={mount:new Set,unMount:new Set,array:new Set,watch:new Set},w=0;const x={isDirty:!1,dirtyFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1},j={values:z(),array:z(),state:z()},U=e.resetOptions&&e.resetOptions.keepDirtyValues,B=k(s.mode),M=k(s.reValidateMode),q=s.criteriaMode===v,I=async e=>{if(x.isValid||e){const e=s.resolver?b((await X()).errors):await Y(m,!0);e!==o.isValid&&j.state.next({isValid:e})}},P=e=>x.isValidating&&j.state.next({isValidating:e}),$=(e,t,r,s)=>{const a=y(m,e);if(a){const i=y(g,e,f(r)?y(h,e):r);f(i)||s&&s.defaultChecked||t?F(g,e,t?i:re(a._f)):oe(e,i),p.mount&&I()}},H=(e,t,r,s,a)=>{let i=!1,n=!1;const u={name:e};if(!r||s){x.isDirty&&(n=o.isDirty,o.isDirty=u.isDirty=Z(),i=n!==u.isDirty);const r=J(y(h,e),t);n=y(o.dirtyFields,e),r?W(o.dirtyFields,e):F(o.dirtyFields,e,!0),u.dirtyFields=o.dirtyFields,i=i||x.dirtyFields&&n!==!r}if(r){const t=y(o.touchedFields,e);t||(F(o.touchedFields,e,r),u.touchedFields=o.touchedFields,i=i||x.touchedFields&&t!==r)}return i&&a&&j.state.next(u),i?u:{}},X=async e=>s.resolver(g,s.context,((e,t,r,s)=>{const a={};for(const r of e){const e=y(t,r);e&&F(a,r,e._f)}return{criteriaMode:r,names:[...e],fields:a,shouldUseNativeValidation:s}})(e||A.mount,m,s.criteriaMode,s.shouldUseNativeValidation)),Y=async(e,t,r={valid:!0})=>{for(const a in e){const i=e[a];if(i){const{_f:e,...a}=i;if(e){const a=A.array.has(e.name),n=await R(i,g,q,s.shouldUseNativeValidation&&!t,a);if(n[e.name]&&(r.valid=!1,t))break;!t&&(y(n,e.name)?a?O(o.errors,n,e.name):F(o.errors,e.name,n[e.name]):W(o.errors,e.name))}a&&await Y(a,t,r)}}return r.valid},Z=(e,t)=>(e&&t&&F(g,e,t),!J(fe(),h)),ne=(e,t,r)=>((e,t,r,s,a)=>V(e)?(s&&t.watch.add(e),y(r,e,a)):Array.isArray(e)?e.map((e=>(s&&t.watch.add(e),y(r,e)))):(s&&(t.watchAll=!0),r))(e,A,{...p.mount?g:f(t)?h:V(e)?{[e]:t}:t},r,t),oe=(e,t,r={})=>{const s=y(m,e);let i=t;if(s){const r=s._f;r&&(!r.disabled&&F(g,e,te(t,r)),i=L(r.ref)&&n(t)?"":t,K(r.ref)?[...r.ref.options].forEach((e=>e.selected=i.includes(e.value))):r.refs?a(r.ref)?r.refs.length>1?r.refs.forEach((e=>(!e.defaultChecked||!e.disabled)&&(e.checked=Array.isArray(i)?!!i.find((t=>t===e.value)):i===e.value))):r.refs[0]&&(r.refs[0].checked=!!i):r.refs.forEach((e=>e.checked=e.value===i)):E(r.ref)?r.ref.value="":(r.ref.value=i,r.ref.type||j.values.next({name:e,values:{...g}})))}(r.shouldDirty||r.shouldTouch)&&H(e,i,r.shouldTouch,r.shouldDirty,!0),r.shouldValidate&&de(e)},ue=(e,t,r)=>{for(const s in t){const a=t[s],n=`${e}.${s}`,o=y(m,n);!A.array.has(e)&&G(a)&&(!o||o._f)||i(a)?oe(n,a,r):ue(n,a,r)}},le=(e,r,s={})=>{const a=y(m,e),i=A.array.has(e),u=c(r);F(g,e,u),i?(j.array.next({name:e,values:{...g}}),(x.isDirty||x.dirtyFields)&&s.shouldDirty&&j.state.next({name:e,dirtyFields:ee(h,g),isDirty:Z(e,u)})):!a||a._f||n(u)?oe(e,u,s):ue(e,u,s),D(e,A)&&j.state.next({...o}),j.values.next({name:e,values:{...g}}),!p.mount&&t()},ce=async t=>{const i=t.target;let n=i.name,l=!0;const c=y(m,n);if(c){let f,h;const v=i.type?re(c._f):(e=>u(e)&&e.target?a(e.target)?e.target.checked:e.target.value:e)(t),p="blur"===t.type||"focusout"===t.type,_=!((d=c._f).mount&&(d.required||d.min||d.max||d.maxLength||d.minLength||d.pattern||d.validate)||s.resolver||y(o.errors,n)||c._f.deps)||((e,t,r,s,a)=>!a.isOnAll&&(!r&&a.isOnTouch?!(t||e):(r?s.isOnBlur:a.isOnBlur)?!e:!(r?s.isOnChange:a.isOnChange)||e))(p,y(o.touchedFields,n),o.isSubmitted,M,B),V=D(n,A,p);F(g,n,v),p?(c._f.onBlur&&c._f.onBlur(t),r&&r(0)):c._f.onChange&&c._f.onChange(t);const S=H(n,v,p,!1),k=!b(S)||V;if(!p&&j.values.next({name:n,type:t.type,values:{...g}}),_)return x.isValid&&I(),k&&j.state.next({name:n,...V?{}:S});if(!p&&V&&j.state.next({...o}),P(!0),s.resolver){const{errors:e}=await X([n]),t=ae(o.errors,m,n),r=ae(e,m,t.name||n);f=r.error,n=r.name,h=b(e)}else f=(await R(c,g,q,s.shouldUseNativeValidation))[n],l=isNaN(v)||v===y(g,n,v),l&&(f?h=!1:x.isValid&&(h=await Y(m,!0)));l&&(c._f.deps&&de(c._f.deps),((t,s,a,i)=>{const n=y(o.errors,t),u=x.isValid&&C(s)&&o.isValid!==s;var l;if(e.delayError&&a?(l=()=>((e,t)=>{F(o.errors,e,t),j.state.next({errors:o.errors})})(t,a),r=e=>{clearTimeout(w),w=setTimeout(l,e)},r(e.delayError)):(clearTimeout(w),r=null,a?F(o.errors,t,a):W(o.errors,t)),(a?!J(n,a):n)||!b(i)||u){const e={...i,...u&&C(s)?{isValid:s}:{},errors:o.errors,name:t};o={...o,...e},j.state.next(e)}P(!1)})(n,h,f,S))}var d},de=async(e,t={})=>{let r,a;const i=_(e);if(P(!0),s.resolver){const t=await(async e=>{const{errors:t}=await X();if(e)for(const r of e){const e=y(t,r);e?F(o.errors,r,e):W(o.errors,r)}else o.errors=t;return t})(f(e)?e:i);r=b(t),a=e?!i.some((e=>y(t,e))):r}else e?(a=(await Promise.all(i.map((async e=>{const t=y(m,e);return await Y(t&&t._f?{[e]:t}:t)})))).every(Boolean),(a||o.isValid)&&I()):a=r=await Y(m);return j.state.next({...!V(e)||x.isValid&&r!==o.isValid?{}:{name:e},...s.resolver||!e?{isValid:r}:{},errors:o.errors,isValidating:!1}),t.shouldFocus&&!a&&S(m,(e=>e&&y(o.errors,e)),e?i:A.mount),a},fe=e=>{const t={...h,...p.mount?g:{}};return f(e)?t:V(e)?y(t,e):e.map((e=>y(t,e)))},ye=(e,t)=>({invalid:!!y((t||o).errors,e),isDirty:!!y((t||o).dirtyFields,e),isTouched:!!y((t||o).touchedFields,e),error:y((t||o).errors,e)}),me=(e,t={})=>{for(const r of e?_(e):A.mount)A.mount.delete(r),A.array.delete(r),t.keepValue||(W(m,r),W(g,r)),!t.keepError&&W(o.errors,r),!t.keepDirty&&W(o.dirtyFields,r),!t.keepTouched&&W(o.touchedFields,r),!s.shouldUnregister&&!t.keepDefaultValue&&W(h,r);j.values.next({values:{...g}}),j.state.next({...o,...t.keepDirty?{isDirty:Z()}:{}}),!t.keepIsValid&&I()},he=(e,t={})=>{let r=y(m,e);const i=C(t.disabled);return F(m,e,{...r||{},_f:{...r&&r._f?r._f:{ref:{name:e}},name:e,mount:!0,...t}}),A.mount.add(e),r?i&&F(g,e,t.disabled?void 0:y(g,e,re(r._f))):$(e,!0,t.value),{...i?{disabled:t.disabled}:{},...s.shouldUseNativeValidation?{required:!!t.required,min:se(t.min),max:se(t.max),minLength:se(t.minLength),maxLength:se(t.maxLength),pattern:se(t.pattern)}:{},name:e,onChange:ce,onBlur:ce,ref:i=>{if(i){he(e,t),r=y(m,e);const s=f(i.value)&&i.querySelectorAll&&i.querySelectorAll("input,select,textarea")[0]||i,n=(e=>N(e)||a(e))(s),o=r._f.refs||[];if(n?o.find((e=>e===s)):s===r._f.ref)return;F(m,e,{_f:{...r._f,...n?{refs:[...o.filter(Q),s,...Array.isArray(y(h,e))?[{}]:[]],ref:{type:s.type,name:e}}:{ref:s}}}),$(e,!1,void 0,s)}else r=y(m,e,{}),r._f&&(r._f.mount=!1),(s.shouldUnregister||t.shouldUnregister)&&(!((e,t)=>e.has((e=>e.substring(0,e.search(/\.\d+(\.|$)/))||e)(t)))(A.array,e)||!p.action)&&A.unMount.add(e)}}},ve=()=>s.shouldFocusError&&S(m,(e=>e&&y(o.errors,e)),A.mount),ge=(r,s={})=>{const a=r||h,i=c(a),n=r&&!b(r)?i:h;if(s.keepDefaultValues||(h=a),!s.keepValues){if(s.keepDirtyValues||U)for(const e of A.mount)y(o.dirtyFields,e)?F(n,e,y(g,e)):le(e,y(n,e));else{if(l&&f(r))for(const e of A.mount){const t=y(m,e);if(t&&t._f){const e=Array.isArray(t._f.refs)?t._f.refs[0]:t._f.ref;if(L(e)){const t=e.closest("form");if(t){t.reset();break}}}}m={}}g=e.shouldUnregister?s.keepDefaultValues?c(h):{}:i,j.array.next({values:{...n}}),j.values.next({values:{...n}})}A={mount:new Set,unMount:new Set,array:new Set,watch:new Set,watchAll:!1,focus:""},!p.mount&&t(),p.mount=!x.isValid||!!s.keepIsValid,p.watch=!!e.shouldUnregister,j.state.next({submitCount:s.keepSubmitCount?o.submitCount:0,isDirty:s.keepDirty?o.isDirty:!(!s.keepDefaultValues||J(r,h)),isSubmitted:!!s.keepIsSubmitted&&o.isSubmitted,dirtyFields:s.keepDirtyValues?o.dirtyFields:s.keepDefaultValues&&r?ee(h,r):{},touchedFields:s.keepTouched?o.touchedFields:{},errors:s.keepErrors?o.errors:{},isSubmitting:!1,isSubmitSuccessful:!1})},pe=(e,t)=>ge(T(e)?e(g):e,t);return{control:{register:he,unregister:me,getFieldState:ye,_executeSchema:X,_getWatch:ne,_getDirty:Z,_updateValid:I,_removeUnmounted:()=>{for(const e of A.unMount){const t=y(m,e);t&&(t._f.refs?t._f.refs.every((e=>!Q(e))):!Q(t._f.ref))&&me(e)}A.unMount=new Set},_updateFieldArray:(e,t=[],r,s,a=!0,i=!0)=>{if(s&&r){if(p.action=!0,i&&Array.isArray(y(m,e))){const t=r(y(m,e),s.argA,s.argB);a&&F(m,e,t)}if(i&&Array.isArray(y(o.errors,e))){const t=r(y(o.errors,e),s.argA,s.argB);a&&F(o.errors,e,t),((e,t)=>{!d(y(e,t)).length&&W(e,t)})(o.errors,e)}if(x.touchedFields&&i&&Array.isArray(y(o.touchedFields,e))){const t=r(y(o.touchedFields,e),s.argA,s.argB);a&&F(o.touchedFields,e,t)}x.dirtyFields&&(o.dirtyFields=ee(h,g)),j.state.next({name:e,isDirty:Z(e,t),dirtyFields:o.dirtyFields,errors:o.errors,isValid:o.isValid})}else F(g,e,t)},_getFieldArray:t=>d(y(p.mount?g:h,t,e.shouldUnregister?y(h,t,[]):[])),_reset:ge,_resetDefaultValues:()=>T(s.defaultValues)&&s.defaultValues().then((e=>{pe(e,s.resetOptions),j.state.next({isLoading:!1})})),_updateFormState:e=>{o={...o,...e}},_subjects:j,_proxyFormState:x,get _fields(){return m},get _formValues(){return g},get _state(){return p},set _state(e){p=e},get _defaultValues(){return h},get _names(){return A},set _names(e){A=e},get _formState(){return o},set _formState(e){o=e},get _options(){return s},set _options(e){s={...s,...e}}},trigger:de,register:he,handleSubmit:(e,t)=>async r=>{r&&(r.preventDefault&&r.preventDefault(),r.persist&&r.persist());let a=c(g);if(j.state.next({isSubmitting:!0}),s.resolver){const{errors:e,values:t}=await X();o.errors=e,a=t}else await Y(m);W(o.errors,"root"),b(o.errors)?(j.state.next({errors:{}}),await e(a,r)):(t&&await t({...o.errors},r),ve(),setTimeout(ve)),j.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:b(o.errors),submitCount:o.submitCount+1,errors:o.errors})},watch:(e,t)=>T(e)?j.values.subscribe({next:r=>e(ne(void 0,t),r)}):ne(e,t,!0),setValue:le,getValues:fe,reset:pe,resetField:(e,t={})=>{y(m,e)&&(f(t.defaultValue)?le(e,y(h,e)):(le(e,t.defaultValue),F(h,e,t.defaultValue)),t.keepTouched||W(o.touchedFields,e),t.keepDirty||(W(o.dirtyFields,e),o.isDirty=t.defaultValue?Z(e,y(h,e)):Z()),t.keepError||(W(o.errors,e),x.isValid&&I()),j.state.next({...o}))},clearErrors:e=>{e&&_(e).forEach((e=>W(o.errors,e))),j.state.next({errors:e?o.errors:{}})},unregister:me,setError:(e,t,r)=>{const s=(y(m,e,{_f:{}})._f||{}).ref;F(o.errors,e,{...t,ref:s}),j.state.next({name:e,errors:o.errors,isValid:!1}),r&&r.shouldFocus&&s&&s.focus&&s.focus()},setFocus:(e,t={})=>{const r=y(m,e),s=r&&r._f;if(s){const e=s.refs?s.refs[0]:s.ref;e.focus&&(e.focus(),t.shouldSelect&&e.select())}},getFieldState:ye}}function oe(e={}){const t=s.useRef(),[r,a]=s.useState({isDirty:!1,isValidating:!1,isLoading:T(e.defaultValues),isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,submitCount:0,dirtyFields:{},touchedFields:{},errors:{},defaultValues:T(e.defaultValues)?void 0:e.defaultValues});t.current||(t.current={...ne(e,(()=>a((e=>({...e}))))),formState:r});const i=t.current.control;return i._options=e,function(e){const t=s.useRef(e);t.current=e,s.useEffect((()=>{const r=!e.disabled&&t.current.subject&&t.current.subject.subscribe({next:t.current.next});return()=>{r&&r.unsubscribe()}}),[e.disabled])}({subject:i._subjects.state,next:e=>{((e,t,r,s)=>{r(e);const{name:a,...i}=e;return b(i)||Object.keys(i).length>=Object.keys(t).length||Object.keys(i).find((e=>t[e]===(!s||v)))})(e,i._proxyFormState,i._updateFormState,!0)&&a({...i._formState})}}),s.useEffect((()=>{e.values&&!J(e.values,i._defaultValues)?i._reset(e.values,i._options.resetOptions):i._resetDefaultValues()}),[e.values,i]),s.useEffect((()=>{i._state.mount||(i._updateValid(),i._state.mount=!0),i._state.watch&&(i._state.watch=!1,i._subjects.state.next({...i._formState})),i._removeUnmounted()})),t.current.formState=((e,t,r,s=!0)=>{const a={defaultValues:t._defaultValues};for(const i in e)Object.defineProperty(a,i,{get:()=>{const a=i;return t._proxyFormState[a]!==v&&(t._proxyFormState[a]=!s||v),r&&(r[a]=!0),e[a]}});return a})(r,i),t.current}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,